/**
 * Provides the base Widget Login
 *
 * @module util
 * @submodule {{pref}}App
 */
define([], function () {
	'use strict';
	var UtilFactory = {
	

		/**
		 * Factory to support custom dynamic view of children widgets based on the sub-routings
		 *
		 * @class $trUtilFactory
		 * @constructor
		 * @module util
		 */
		$trUtilFactory: function () {
			var factory={};
			/**
			 * @method findWidgetByRoute
			 * @param routeName {string}
			 * @return {Object}
			 * @example
			 * { component: componentPath, tag: tagName }
			 */
			factory.findWidgetByRoute=function(routeName){
				var comp=Clazz.config.routeAssetMapping[routeName];
				if(comp===undefined||comp==='') return false;
				var tagName='<tr:'+ comp.module +'></tr:'+ comp.module+'>';
				return { 
						component: comp.componentPath, 
						 tag: tagName
					}
			}
			return factory;
		},
		/**
		 * Custom Application http factory  Used to validate pre-conditions if any before http request is made
		 *
		 * @class $trHttp
		 * @constructor
		 * @module util
		 */
		$trHttp: function($http){
			var httpFactory={};
            $http.defaults.transformResponse.push(function (data) {
                    return data;
            });
			/**
			 * To process data before sent to server
			 *
			 * @method preCheck
			 * @return {boolean}
			 * @private
			 */
			var preCheck=function(){
				//Todo , Cookie read,  Session ID validate, User Validate etc.

				return true;
			};
			/**
			 * To process data after receiving from server server
			 *
			 * @method postCheck
			 * @return {boolean}
			 * @private
			 */
			var postCheck=function(){
				//Todo

				return true;
			};
			/**
			 *
			 *
			 * @method config
			 * @return {object}
			 */
			httpFactory.config=function(options){
				if(preCheck()){
					return $http(options);
				}
				return null;
			};
			/**
			 *
			 *
			 * @method get
			 * @return {object}
			 */
			httpFactory.get=function(url,config){
				if(preCheck()){
					return $http.get(url,config);
				}
				return null;
			};
			/**
			 *
			 *
			 * @method post
			 * @return {object}
			 */
			httpFactory.post=function(url,config){
				if(preCheck()){
					return $http.post(url,config);
				}
				return null;
			};
			/**
			 *
			 *
			 * @method put
			 * @return {object}
			 */
			httpFactory.put=function(url,config){
				if(preCheck()){
					return $http.put(url,config);
				}
				return null;
			};
			/**
			 *
			 *
			 * @method delete
			 * @return {object}
			 */
			httpFactory.delete=function(url,config){
				if(preCheck()){
					return $http.delete(url,config);
				}
				return null;
			};
			/**
			 *
			 *
			 * @method fileUpload
			 * @return {object}
			 */
            httpFactory.fileUpload=function(url,form,uploadComplete,uploadFailed,uploadProgress,uploadCanceled){
                var xhr = new XMLHttpRequest();
                if(uploadProgress != undefined){
                    xhr.upload.addEventListener("progress", uploadProgress, false);
                }
                if(uploadComplete != undefined) {
                    xhr.addEventListener("load", uploadComplete, false);
                }
                if(uploadFailed != undefined) {
                    xhr.addEventListener("error", uploadFailed, false);
                }
                if(uploadCanceled != undefined) {
                    xhr.addEventListener("abort", uploadCanceled, false);
                }
                xhr.open("POST", url);
                xhr.send(form);
            };
			return httpFactory;
		}
	};
	return UtilFactory;
});